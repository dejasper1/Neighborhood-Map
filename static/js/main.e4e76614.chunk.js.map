{"version":3,"sources":["components/Header.js","components/SideBar.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","aria-label","tabIndex","width","height","onClick","changeSideBar","d","stroke","strokeWidth","SideBar","triggerMarkerClick","venueName","_this","markers","map","marker","title","window","google","maps","event","trigger","_this2","this","react","className","type","value","query","onChange","e","updateQuery","target","placeholder","venues","v","role","key","venue","id","name","Component","App","state","filteredVenues","sidebar","initMap","Map","document","getElementById","center","lat","lng","zoom","infowindow","InfoWindow","pos","location","Marker","position","animation","Animation","DROP","content","concat","address","city","postalCode","addListener","setContent","open","getAnimation","setAnimation","BOUNCE","setTimeout","push","setState","renderMap","ref","script","getElementsByTagName","src","async","onerror","alert","parentNode","insertBefore","getVenues","fetch","then","response","json","data","groups","items","catch","err","console","log","filterVenues","forEach","m","setVisible","filter","toLowerCase","includes","gm_authFailure","components_Header","components_SideBar","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","src_App_0","URL","process","origin","addEventListener","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e4e76614.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = props => {\n  return (\n    <nav>\n      <svg\n        aria-label=\"menu\"\n        tabIndex=\"0\"\n        width=\"30\"\n        height=\"30\"\n        onClick={props.changeSideBar}\n      >\n        <path d=\"M0,5 30,5\" stroke=\"#fff\" strokeWidth=\"5\" />\n        <path d=\"M0,14 30,14\" stroke=\"#fff\" strokeWidth=\"5\" />\n        <path d=\"M0,23 30,23\" stroke=\"#fff\" strokeWidth=\"5\" />\n      </svg>\n      <h3>Trending Foursquare Venues</h3>\n    </nav>\n  );\n};\n\nexport default Header;\n","import React, { Component, Fragment } from \"react\";\n\nclass SideBar extends Component {\n  triggerMarkerClick = venueName => {\n    this.props.markers.map(marker => {\n      if (marker.title === venueName) {\n        window.google.maps.event.trigger(marker, \"click\");\n      }\n    });\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <div className=\"side-bar\">\n          <span\n            aria-label=\"close\"\n            tabIndex=\"0\"\n            onClick={this.props.changeSideBar}\n            className=\"btn-close\"\n          >\n            &times;\n          </span>\n          <input\n            aria-label=\"filter venues\"\n            type=\"text\"\n            value={this.props.query}\n            onChange={e => {\n              this.props.updateQuery(e.target.value);\n            }}\n            className=\"input\"\n            placeholder=\"Filter Venues...\"\n          />\n          <ul>\n            {this.props.venues.map(v => {\n              return (\n                <li\n                  tabIndex=\"0\"\n                  role=\"link\"\n                  className=\"list-item\"\n                  key={v.venue.id}\n                  onClick={() => this.triggerMarkerClick(v.venue.name)}\n                >\n                  {v.venue.name}\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default SideBar;\n","import React, { Component, Fragment } from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport SideBar from \"./components/SideBar\";\n\nclass App extends Component {\n  state = {\n    venues: [],\n    filteredVenues: [],\n    markers: [],\n    sidebar: true,\n    query: \"\"\n  };\n\n  // create instance of map\n  initMap = () => {\n    const map = new window.google.maps.Map(document.getElementById(\"map\"), {\n      center: { lat: 47.6062, lng: -122.332 },\n      zoom: 10\n    });\n\n    // create markers array\n    const markers = [];\n    // create info window\n    const infowindow = new window.google.maps.InfoWindow();\n    // display list of markers from venues array in state\n    this.state.venues.map(v => {\n      // get position of each venue\n      const pos = { lat: v.venue.location.lat, lng: v.venue.location.lng };\n      // create marker and assisgn position and map\n      const marker = new window.google.maps.Marker({\n        position: pos,\n        map: map,\n        animation: window.google.maps.Animation.DROP,\n        title: v.venue.name\n      });\n      const content = `${v.venue.name} <br> \n      ${v.venue.location.address} <br>\n      ${v.venue.location.city}, ${v.venue.location.state} \n      ${v.venue.location.postalCode}`;\n\n      // add listener for marker click event\n      marker.addListener(\"click\", function() {\n        // update marker content\n        infowindow.setContent(content);\n        // add content to infowindow\n        infowindow.open(map, marker);\n        // marker animation - source: https://developers.google.com/maps/documentation/javascript/examples/marker-animations\n        if (marker.getAnimation() !== null) {\n          marker.setAnimation(null);\n        } else {\n          marker.setAnimation(window.google.maps.Animation.BOUNCE);\n          setTimeout(function() {\n            marker.setAnimation(null);\n          }, 750);\n        }\n      });\n      markers.push(marker);\n      this.setState({ markers });\n    });\n  };\n\n  renderMap = () => {\n    // Connect the initMap() function within this class to the global window context,\n    // so Google Maps can invoke it\n    window.initMap = this.initMap;\n    // Asynchronously load the Google Maps script\n    loadJS();\n  };\n\n  getVenues = () => {\n    fetch(\n      \"https://api.foursquare.com/v2/venues/explore?client_id=CQ05ERMDJAWYWLX0UNC3R5B1XB43G3C0YUMRWD0PVZQI4KAO&client_secret=3ZBI3S4FNTZH2R4YTPYUG4CIWIX05APWJVNLCRETVIHP4D33&v=20180323&limit=15&near=Seattle,WA&query=trending\"\n    )\n      .then(response => {\n        // Code for handling API response\n        return response.json();\n      })\n      .then(data => {\n        // Code for setting state with venues\n        const venues = data.response.groups[0].items;\n\n        this.setState(\n          {\n            venues: venues,\n            filteredVenues: venues\n          },\n          this.renderMap()\n        );\n      })\n      .catch(err => {\n        // Code for handling fetch errors\n        console.log(\"Error: \", err);\n        alert(\"Error: Foursquare API failed to load\");\n      });\n  };\n  // Handle authentication error with the Google Maps API\n  gm_authFailure() {\n    window.alert(\"Google Maps authentication error!\");\n  }\n\n  componentDidMount() {\n    // Bind the gm_authFailure function to the window context\n    window.gm_authFailure = this.gm_authFailure;\n\n    this.getVenues();\n  }\n\n  // click event for sidebar change\n  changeSideBar = () => {\n    this.setState({\n      sidebar: !this.state.sidebar\n    });\n  };\n\n  updateQuery = query => {\n    if (query) {\n      this.setState({ query: query });\n      this.filterVenues(query);\n    } else {\n      this.setState({ query: \"\" });\n      this.setState({ filteredVenues: this.state.venues });\n      this.state.markers.forEach(m => m.setVisible(true));\n    }\n  };\n\n  // Filter displayed markers and items\n  filterVenues = query => {\n    this.setState({\n      filteredVenues: this.state.venues.filter(v => {\n        return v.venue.name.toLowerCase().includes(query.toLowerCase());\n      })\n    });\n    this.state.markers.forEach(m => {\n      m.title.toLowerCase().includes(query.toLowerCase())\n        ? m.setVisible(true)\n        : m.setVisible(false);\n    });\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <Header changeSideBar={this.changeSideBar} />\n        {this.state.sidebar && (\n          <SideBar\n            changeSideBar={this.changeSideBar}\n            venues={this.state.filteredVenues}\n            query={this.state.query}\n            updateQuery={this.updateQuery}\n            markers={this.state.markers}\n          />\n        )}\n        <main>\n          <div id=\"map\" className=\"App\" />\n        </main>\n      </Fragment>\n    );\n  }\n}\n\n// source: https://www.klaasnotfound.com/2016/11/06/making-google-maps-work-with-react/\nfunction loadJS() {\n  var API = \"AIzaSyDbAz1XXxDoKSU2nZXec89rcHPxgkvVoiw\";\n  var ref = window.document.getElementsByTagName(\"script\")[0];\n  var script = window.document.createElement(\"script\");\n  script.src = `https://maps.googleapis.com/maps/api/js?key=${API}&callback=initMap`;\n  script.async = true;\n  script.onerror = function() {\n    alert(\"Error Google Maps API failed to load. \\n\" + this.src); // Error loading https://example.com/404.js\n  };\n  ref.parentNode.insertBefore(script, ref);\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}